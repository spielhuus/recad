//!Schema definition with all required fields and data types.

// Define the KiCad Schematic File structure
#[derive(Debug)]
///Schematic file format for all versions of KiCad from 6.0.
pub struct Schema {
    ///The version token attribute defines the schematic version
    ///using the YYYYMMDD date format.
    pub version: String,
    ///The UNIQUE_IDENTIFIER defines the universally unique identifier for
    ///the schematic file. This identifier is used when creating hierarchical
    ///sheet paths which are used to reference symbol instance data and
    ///hierarchical sheet instance information.
    pub uuid: String,
    ///The generator token attribute defines the program used to write the file.
    pub generator: String,
    pub paper: crate::PaperSize,
    pub title_block: crate::TitleBlock,
    pub library_symbols: Vec<LibrarySymbol>,
    pub junctions: Vec<Junction>,
    pub no_connects: Vec<NoConnect>,
    pub wires: Vec<Wire>,
    //pub wires_and_buses: Vec<WireAndBus>,
    //pub images: Vec<Image>,
    //pub graphical_lines: Vec<GraphicalLine>,
    //pub graphical_texts: Vec<GraphicalText>,
    pub local_labels: Vec<LocalLabel>,
    pub global_labels: Vec<GlobalLabel>,
    pub symbols: Vec<Symbol>,
    //pub hierarchical_sheets: Vec<HierarchicalSheet>,
    //pub root_sheet_instances: Vec<RootSheetInstance>,
}

impl std::fmt::Display for Schema {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "Schema {{ version: {}, uuid: {}, generator: {}, paper: {}\n\t, title_block: {}\n\t, library_symbols: {}\n\t, symbols: {}\n\t, junctions: {}\n\t, no_connects: {}\n\t, wires: {}\n\t, local_labels: {}\n\t, global_labels: {}, }}",
            self.version,
            self.uuid,
            self.generator,
            self.paper,
            self.title_block,
            self.library_symbols.len(),
            self.symbols.len(),
            self.junctions.len(),
            self.no_connects.len(),
            self.wires.len(),
            self.local_labels.len(),
            self.global_labels.len(),
        )
    }
}

///The junction token defines a junction in the schematic.
#[derive(Debug, Clone)]
pub struct Junction {
    ///The POSITION_IDENTIFIER defines the X and Y coordinates of the junction.
    pub pos: crate::Pos,           
    ///Diameter of the junction
    pub diameter: Option<f32>, 
    pub color: Option<crate::Color>,
    ///Universally unique identifier for the junction
    pub uuid: String,          
}

///The wire tokens define wires in the schematic.
#[derive(Debug, Clone)]
pub struct Wire {
    ///The COORDINATE_POINT_LIST defines the list of X and Y coordinates of start and end points of the wire.
    pub pts: crate::Pts, 
    ///The STROKE_DEFINITION defines how the wire or bus is drawn.
    pub stroke: crate::Stroke, 
    /////Universally unique identifier for the junction
    pub uuid: String, 
}

///The local_label tokens define LocalLabel in the schematic.
#[derive(Debug, Clone)]
pub struct LocalLabel {
    // Label text
    pub text: String,
    // Position of the label
    pub pos: crate::Pos,
    // Color of the label
    pub color: Option<crate::Color>,
    //Universally unique identifier for the junction
    pub uuid: String,
}

///The gloabal_label tokens define Global Label in the schematic.
#[derive(Debug, Clone)]
pub struct GlobalLabel {
    pub text: String,
    pub shape: Option<String>,
    pub pos: crate::Pos,
    pub text_effects: crate::Effects,
    pub uuid: String,
    //TODO properties: Properties,
}

///The no_connect token defines a unused pin connection in the schematic.
#[derive(Debug, Clone)]
pub struct NoConnect {
    ///The POSITION_IDENTIFIER defines the X and Y coordinates of the no connect.
    pub pos: crate::Pos, 
    ///The UNIQUE_IDENTIFIER defines the universally unique identifier for the no connect.
    pub uuid: String,
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct PinName {
    name: String,
    effects: crate::Effects,
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct PinNumber {
    pub name: String,
    pub effects: crate::Effects,
}
/// Enum representing the different types of electrical pins.
#[derive(Clone, Debug, Default, PartialEq)]
pub enum ElectricalTypes {
    /// Input pin is an input.
    Input,
    /// Output pin is an output.
    Output,
    /// Bidirectional pin can be both input and output.
    #[default]
    Bidirectional,
    /// Tri-state pin is a tri-state output.
    TriState,
    /// Passive pin is electrically passive.
    Passive,
    /// Free pin is not internally connected.
    Free,
    /// Unspecified pin does not have a specified electrical type.
    Unspecified,
    /// Power in pin is a power input.
    PowerIn,
    /// Power out pin is a power output.
    PowerOut,
    /// Open collector pin is an open collector output.
    OpenCollector,
    /// Open emitter pin is an open emitter output.
    OpenEmitter,
    /// No connect pin has no electrical connection.
    NoConnect,
}

///Enum representing the different pin graphical styles in KiCad.
#[derive(Clone, Debug, Default, PartialEq)]
pub enum PinGraphicalStyle {
    #[default]
    Line, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_normal_16.png"/>
    Inverted, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_invert_16.png"/>
    Clock, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_clock_normal_16.png"/>
    InvertedClock, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_clock_invert_16.png"/>
    InputLow, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_active_low_input_16.png"/>
    ClockLow, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_clock_active_low_16.png"/>
    OutputLow, ///see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_active_low_output_16.png"/>
    EdgeClockHigh, /// see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_clock_fall_16.png"/>
    NonLogic, //see: <img src="https://dev-docs.kicad.org/en/file-formats/sexpr-intro/images/pinshape_nonlogic_16.png"/>
}

///The pin token defines a pin in a symbol definition.
#[derive(Clone, Debug, Default, PartialEq)]
pub struct Pin {
    ///The PIN_ELECTRICAL_TYPE defines the pin electrical connection. 
    pub electrical_type: ElectricalTypes,
    ///The PIN_GRAPHICAL_STYLE defines the graphical style used to draw the pin.
    pub graphical_style: PinGraphicalStyle,
    ///The POSITION_IDENTIFIER defines the X and Y coordinates and rotation angle 
    ///of the connection point of the pin relative to the symbol 
    ///origin position. The only supported rotation angles for 
    ///pins are 0, 90, 180, and 270 degrees.
    pub pos: crate::Pos,
    ///The length token attribute defines the LENGTH of the pin.
    pub length: f32,
    ///The name token defines a quoted string containing the NAME of the pin 
    ///and the TEXT_EFFECTS defines how the text is displayed.
    pub name: PinName,
    ///The number token defines a quoted string containing the NUMBER 
    ///of the pin and the TEXT_EFFECTS defines how the text is displayed.
    pub number: PinNumber,
}

///The symbol token defines a symbol or sub-unit of a parent symbol
#[derive(Debug, Clone)]
pub struct LibrarySymbol {
    ///Each symbol must have a unique "LIBRARY_ID" for each top level symbol in the library 
    ///or a unique "UNIT_ID" for each unit embedded in a parent symbol. Library identifiers
    ///are only valid it top level symbols and unit identifiers are on valid as unit symbols 
    ///inside a parent symbol.
    pub lib_id: String,
    ///The optional extends token attribute defines the "LIBRARY_ID" of another symbol inside
    ///the current library from which to derive a new symbol. Extended symbols currently can
    ///only have different SYMBOL_PROPERTIES than their parent symbol.
    pub extends: Option<String>,
    ///The optional pin_numbers token defines the visibility setting of the symbol pin numbers
    ///for the entire symbol. If not defined, the all of the pin numbers in the symbol are visible.
    pub pin_numbers: bool,
    ///The optional pin_names token defines the attributes for all of the pin names of the symbol.
    ///The optional offset token defines the pin name offset for all pin names of the symbol.
    ///If not defined, the pin name offset is 0.508mm (0.020"). If the pin_name token is not 
    ///defined, the all symbol pins are shown with the default offset.
    pub pin_names: bool,
    ///The in_bom token, defines if a symbol is to be include in the bill of material output.
    ///The only valid attributes are yes and no.
    pub in_bom: bool,
    ///The on_board token, defines if a symbol is to be exported from the schematic to the
    ///printed circuit board. The only valid attributes are yes and no.
    pub on_board: bool,
    ///The SYMBOL_PROPERTIES is a list of properties that define the symbol. The following
    ///properties are mandatory when defining a parent symbol: 
    ///  "Reference", 
    ///  "Value", 
    ///  "Footprint", 
    ///  and "Datasheet". 
    ///All other properties are optional. Unit symbols cannot have any properties.
    pub props: Vec<crate::Property>,
    ///The GRAPHIC ITEMS section is list of graphical 
    ///  arcs, circles, curves, lines, polygons, rectangles 
    ///and text that define the symbol drawing. This section can be empty if the
    ///symbol has no graphical items.
    pub graphics: Vec<crate::gr::GraphicItem>,
    ///The PINS section is a list of pins that are used by the symbol.
    ///This section can be empty if the symbol does not have any pins.
    pub pins: Vec<Pin>,
    pub pin_names_offset: Option<f32>,
    ///The optional UNITS can be one or more child symbol tokens embedded in a parent symbol.
    pub units: Vec<LibrarySymbol>,
    ///The optional unit_name token defines the display name of a subunit in the symbol 
    ///editor and symbol chooser. It is only permitted for child symbol tokens embedded 
    ///in a parent symbol.
    pub unit_name: Option<String>,
}

///The symbol token in the symbol section of the schematic defines an instance 
///of a symbol from the library symbol section of the schematic.
#[derive(Clone, Debug, Default, PartialEq)]
pub struct Symbol {
    ///The LIBRARY_IDENTIFIER defines which symbol in the library symbol section of the schematic that this schematic symbol references.
    pub lib_id: String,
    ///The POSITION_IDENTIFIER defines the X and Y coordinates and angle of rotation of the symbol.
    pub pos: crate::Pos,
    ///The unit token attribute defines which unit in the symbol library definition that the schematic symbol represents.
    pub unit: u8,
    ///The in_bom token attribute determines whether the schematic symbol appears in any bill of materials output.
    pub in_bom: bool,
    ///The on_board token attribute determines if the footprint associated with the symbol is exported to the board via the netlist.
    pub on_board: bool,
    ///The UNIQUE_IDENTIFIER defines the universally unique identifier for the symbol. This is used to map the symbol the symbol instance information.
    pub uuid: String,
    ///The PROPERTIES section defines a list of symbol properties of the schematic symbol.
    pub props: Vec<crate::Property>,
    //TODO pin and instance

    //The pin token attributes define ???.
    //The instances token defines a list of symbol instances grouped by project. Every symbol will have a least one instance.
    //The project token attribute defines the name of the project to which the instance data belongs. There can be instance data from other project when schematics are shared across multiple projects. The projects will be sorted by the PROJECT_NAME in alphabetical order.
    //The path token attribute is the path to the sheet instance for the instance data.
    //The reference token attribute is a string that defines the reference designator for the symbol instance.
}

#[cfg(test)]
mod tests {

    #[test]
    fn get_lib_symbol() {

    }
}
